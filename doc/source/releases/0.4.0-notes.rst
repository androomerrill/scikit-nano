================================
scikit-nano 0.4.0 Release Notes
================================

.. contents::

**Release date:** (April 8, 2016)

scikit-nano 0.4.0 brings many new features, improvements, and bug fixes.

Highlights of this release include:

* New :mod:`~sknano.core.analysis` package with Cython accelerated functions
  for performing rings statistics analysis of atomic netorks.
* New :class:`~sknano.generators.LayeredStructureGenerator` class for
  creating compound layered nanostructure devices.
* New :class:`~sknano.io.DUMPReader`/:class:`~sknano.io.DUMPWriter` classes.
* New :class:`~sknano.io.PDBReader` class.


New Features
============
New modules for structure analysis.

Improvements
============


API Changes
===========
* The default length scale for **all** lengths is now **Angstroms**.

Future Changes
==============


Compatibility notes
===================


Deprecated features
===================


Other changes
=============

* The :mod:`~sknano.core.structures` package was moved from the toplevel
  :mod:`sknano` package to the :mod:`~sknano.core` subpackage.
* Several `__deepcopy__` methods were added to the core classes to allow
  deepcopying all custom classes. The reason for this was to allow the
  user to generate a structure, save the structure to
  one or more structure formats (which may modify the structure),
  and continue working on the structure as it was prior to saving. Therefore,
  methods and functions were implemented to create deepcopys of the
  structure data during output. However, this operation incurs a huge
  performance penalty and I'm not satisifed with how things turned out.
  I want to find a better way to preserve the structure data when saving or
  else abandon this idea of preserving the original structure between
  output operations...


Contributors to this release
=============================


Issues closed for v0.4.0
------------------------
